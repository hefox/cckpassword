<?php
// $Id: cckpassword.module,v 1.95.2.30 2009/07/18 01:18:07 markuspetrux Exp $

/**
 * @file
 * Defines simple cckpassword field types.
 */

/**
 * Implementation of hook_theme().
 */
function cckpassword_theme() {
  return array(
    'text_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function cckpassword_field_info() {
  return array(
    'cckpassword' => array(
      'label' => t('Password'),
      'description' => t('Store password in the database.'),
    ),
  );
}

function cckpassword_password_methods() {
  return array(
    'md5' => array(
      'title'=>'MD5 Hash',
      'functions'=> array(
        'presave'=>'cckpassword_md5',
      ),
      'max_length' => 32,
    ),
    'plain' => array(
      'title' => 'Plain text',
      'retrievable' => true,
      'functions'=> array(
      ),
      'max_length' => 255,
    )
  );
}

/*presaves*/
function cckpassword_md5($items) {
  $items['value'] = md5($items['value']);
  return $items;
}

function _cckpassword_password_methods($method = NULL, $reset = NULL) {
  static $methods;
  if (empty($methods) || $reset) {
    $methods = module_invoke_all("password_methods");
    drupal_alter("password_methods",$methods);
  }
  if ($method) return $methods[$method];
  return $methods;
}
/**
 * Implementation of hook_field_settings().
 */
function cckpassword_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $methods = _cckpassword_password_methods();
      foreach($methods as $key => $info) {
        $options[$key] = $info['title'];
      }
      $form['method'] = array(
        '#title'=> t('Method'),
        '#description'=> t('Choice the method for storing and retrieving your passwords.<b>Warning:</b> Changing method will invalidate all previous values of this field.'),
        '#options' =>$options ,
        '#default_value'=>($field['method']?$field['method']:'md5'),
        '#type' => 'radios',
      );
      return $form;
    case 'save':
      return array('method');
    case 'database columns':
      $method = _cckpassword_password_methods($field['method']);
      $columns['value'] = array(
        'type' => 'varchar',
        'length' => $method['max_length']?$method['max_length']:32,
        'not null' => FALSE, 
        'sortable' => TRUE,
        'views' => TRUE
      );
      if (!empty($method['extra_fields'])) {
        $columns += $method['extra_fields'] ;
      }
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function cckpassword_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'presave':
      if (empty($field['method'])) $field['method'] = 'md5';
      $method = _cckpassword_password_methods($field['method']);
      $field_name = $field['field_name'];
      $old_vals = content_storage('load',$node);
      $old_vals = $old_vals[$field_name] ;
      if (is_array($items)) {
        
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (!empty($item['value'])) {
            $presave = $method['functions']['presave'];
            
            if ($presave && function_exists($presave)) {
              $items[$delta] = call_user_func($presave,$items[$delta]);
            }
          } elseif ($item['delete']) {
            $items[$delta]['value'] =  '';
          } elseif ($old_vals[$delta]) {
            $items[$delta] = $old_vals[$delta];
          }
        }
      } else {
        $items = $old_vals; 
      }
      
      $node->$field_name = $items;
      return $items;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function cckpassword_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function cckpassword_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('None'),
      'field types' => array('cckpassword'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' cckpassword field formatter.
 */
function theme_cckpassword_formatter_default($element) {
  return '';
}
/**
 * Implementation of hook_widget_info().
 *
 */
function cckpassword_widget_info() {
  return array(
    'cckpassword_cckpasswordfield' => array(
      'label' => t('Plain Password field'),
      'field types' => array('cckpassword'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
    'cckpassword_cckpassworddrupal' => array(
      'label' => t('Drupal password field'),
      'field types' => array('cckpassword'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}



/**
 * Implementation of hook_widget().
 *
 */
function cckpassword_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $widget = $field['widget']['type']=='cckpassword_cckpasswordfield';
  if(empty($widget)){
    _user_password_dynamic_validation();
     $element['value'] = array(
      '#type' => 'password_confirm',
    );
  } else {
     $element['value'] = array(
      '#type' => 'password',
      '#default_value' => '',
    );
  }
  if ($items[$delta]['value']) {
    $element['delete'] = array(
      '#type'=>'checkbox',
      '#title'=> t('Delete current password'),
      '#default_value'=> 0,
    );
  }
  return $element;
}